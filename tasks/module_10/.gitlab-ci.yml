# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: node:18.12

stages:          # List of stages for jobs, and their order of execution
#  - test
#  - prepare-infrastructure
#  - update-infrastructure
#  - infrastructure-update
  - build
  - deploy

#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"

#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."

#infrastructure-prepare-change-set-job:
#  stage: prepare-infrastructure
#  environment: production
#  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
#  script:
#    - echo "Preparing a change set of app's infrastructure..."
#    - aws cloudformation create-change-set
#      --stack-name ${CF_STACK_NAME}
#      --change-set-name ${CF_CHANGE_SET_NAME}
#      --change-set-type "$([[ "$(aws cloudformation describe-stack-resources --stack-name ${CF_STACK_NAME} --output json --query "StackResources" || echo "[]")" == "[]" ]] && echo "CREATE" || echo "UPDATE")"
#      --template-body file://Modules/cloud-formation.yaml
#      --capabilities CAPABILITY_IAM
#      --parameters ParameterKey=BucketName,ParameterValue=${S3_BUCKET} ParameterKey=WebAcl,ParameterValue=${WEB_ACL_ARN}
#      --region ${AWS_DEFAULT_REGION}
#      --output text
#      --query "Id" > change-set-id.txt
#    - aws cloudformation wait change-set-create-complete
#      --change-set-name $(cat change-set-id.txt)
#  only:
#    - master
#  artifacts:
#    paths:
#      - change-set-id.txt

#infrastructure-execute-change-set-job:
#  stage: update-infrastructure
#  environment: production
#  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
#  script:
#    - echo "Executing a changes set. Updating infrastructure resources..."
#    - aws cloudformation execute-change-set
#      --change-set-name $(cat change-set-id.txt)
#      --region ${AWS_DEFAULT_REGION}
#    - aws cloudformation wait stack-update-complete --stack-name ${CF_STACK_NAME}
#  only:
#    - master

#infrastructure-update-job:
#  stage: infrastructure-update
#  environment: production
#  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
#  script:
#    - echo "Updating project's infrastructure..."
#    - aws cloudformation update-stack
#      --stack-name ${CF_STACK_NAME}
#      --template-body file://Modules/cloud-formation.yaml
#      --parameters ParameterKey=BucketName,ParameterValue=${S3_BUCKET} ParameterKey=WebAcl,ParameterValue=${WEB_ACL_ARN}
#      --region ${AWS_DEFAULT_REGION}
#    - aws cloudformation wait stack-update-complete --stack-name ${CF_STACK_NAME}
#  only:
#    - master

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - cd Modules
    - npm ci
    - npm run build
    - echo "Compile complete."
  only:
    - master
  artifacts:
    paths:
      - Modules/build/*

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  environment: production
  script:
    - echo "Deploying application..."
    - cd Modules
      ## Prepare a Maintenance page
      ## Copy the maintenance page to S3 bucket:
#    - aws s3 cp maintenance/index.html s3://${S3_BUCKET}/index.html
      ## Invalidate CloudFront cache
#    - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/index.html"

    ## Clear S3 bucket:
#    - aws s3 rm s3://${S3_BUCKET} --recursive --exclude "index.html"
    - aws s3 rm s3://${S3_BUCKET} --recursive
    - echo S3 bucket is cleared.

    ## Copy dist folder to S3 bucket:
    - aws s3 cp build s3://${S3_BUCKET} --recursive

    ## Create CloudFront invalidation (which actually clears cache):
    - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths ${INVALIDATION_PATH:-"/*"} --output text --query "Invalidation.Id" > invalidation-id.txt
    - aws cloudfront wait invalidation-completed --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --id $(cat invalidation-id.txt)
    - echo "Application successfully deployed."
  only:
    - master
